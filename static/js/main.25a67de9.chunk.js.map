{"version":3,"sources":["Components/Counter.module.css","Components/ControlPanel/ControlPanel.module.css","reportWebVitals.ts","Components/UniversalButton.tsx","Components/InputBlockInitializeted.tsx","Components/CounterTablo/CounterTablo.tsx","AutoCounter.tsx","Components/ControlPanel/ControlPanel.tsx","Components/Counter.tsx","index.tsx","Components/CounterTablo/CounterTablo.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","UniversalButton","title","Color","callback","isDisabled","style","margin","Button","size","color","variant","onClick","disabled","styleInputBlock","fontSize","marginLeft","marginTop","marginBottom","InputBlockInitializeted","props","useState","error","setError","minValue","currentValueOfMinCounter","setCurrentValueOfMinCounter","maxValue","currentValueOfMaxCounter","setCurrentValueOfMaxCounter","useEffect","localStorage","setItem","JSON","stringify","type","placeholder","width","marginRight","onChange","event","Number","currentTarget","value","CounterTablo","count","isWarringMessage","isIncButtonDisable","isResetButtonDisable","setStartValues","errorClass","s","CounterTableClasses","infoTablo","className","inputBlock","countInfo","errorMessage","AutoCounter","isAuto","ControlPanel","IncrementCountHandler","autoIncrementCountHandler","ResetCountHandler","isAutoIncButtonDisable","controlPanel","Counter","getMinValue","restoreMinValue","getItem","parse","getMaxValue","restoreMaxValue","setMinValue","setMaxValue","restoreCurrentCount","setCount","timerId","setTimerId","setIsAuto","setTimeout","wrapper","counter","clearTimeout","clear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25a67de9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__1tGyV\",\"counter\":\"Counter_counter__1nKXm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"ControlPanel_controlPanel__c6lXd\",\"button\":\"ControlPanel_button__1XBCm\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype UniversalButtonPropsType = {\r\n    title: string\r\n    Color: \"primary\" | \"secondary\"\r\n    callback: () => void\r\n    isDisabled: boolean\r\n}\r\n\r\nexport const UniversalButton:React.FC<UniversalButtonPropsType> = ({title,Color,callback, isDisabled, ...props}) => {\r\n    return (<div style={{margin: 5}}>\r\n        <Button\r\n                size={\"small\"}\r\n                color={Color}\r\n                variant={\"contained\"}\r\n                onClick={callback}\r\n                disabled={isDisabled}>\r\n            {title}\r\n        </Button>\r\n    </div>)\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {UniversalButton} from \"./UniversalButton\";\r\n\r\ntype InputBlockInitializetedProps = {\r\n    minValue: number\r\n    maxValue: number\r\n    title: string\r\n    callback: (currentMinValue: number, currentMaxValue: number) => void,\r\n}\r\n\r\nconst styleInputBlock = {\r\n    // width: \"60%\",\r\n    fontSize: \"medium\",\r\n    marginLeft: 10,\r\n    marginTop: 10,\r\n    marginBottom: 10\r\n}\r\n\r\nconst input = {\r\n    marginRight: 10,\r\n    marginBottom: 5\r\n}\r\nexport const InputBlockInitializeted: React.FC<InputBlockInitializetedProps> = (props: InputBlockInitializetedProps) => {\r\n\r\n    let [error, setError] = useState(false)\r\n    let [currentValueOfMinCounter, setCurrentValueOfMinCounter] = useState<number>(props.minValue)\r\n    let [currentValueOfMaxCounter, setCurrentValueOfMaxCounter] = useState<number>(props.maxValue)\r\n\r\n    const setInputMinCurrentValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentValueOfMinCounter(Number(event.currentTarget.value));\r\n    }\r\n    const setInputMaxCurrentValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentValueOfMaxCounter(Number(event.currentTarget.value));\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (currentValueOfMinCounter < 0 || currentValueOfMaxCounter < 0 || currentValueOfMinCounter === currentValueOfMaxCounter || currentValueOfMinCounter > currentValueOfMaxCounter) {\r\n            setError(true)\r\n        } else {\r\n            setError(false)\r\n            localStorage.setItem('minValue', JSON.stringify(currentValueOfMinCounter))\r\n            localStorage.setItem('maxValue', JSON.stringify(currentValueOfMaxCounter))\r\n        }\r\n\r\n    }, [currentValueOfMinCounter, currentValueOfMaxCounter])\r\n\r\n    const setActualValuesHandler = () => {\r\n        props.callback(currentValueOfMinCounter, currentValueOfMaxCounter)\r\n\r\n    }\r\n\r\n    return (<div style={styleInputBlock}>\r\n        <div>\r\n            <input\r\n                type={'number'}\r\n                placeholder={'enter min value...'}\r\n                style={{width: 120, marginBottom: 5, marginRight: 5}}\r\n                onChange={setInputMinCurrentValueHandler}\r\n            />\r\n\r\n            <input\r\n                type=\"number\"\r\n                placeholder={'enter max value...'}\r\n                style={{width: 120, marginBottom: 5}}\r\n                onChange={setInputMaxCurrentValueHandler}\r\n            />\r\n        </div>\r\n        <UniversalButton title={props.title}\r\n                         Color={\"primary\"}\r\n                         callback={setActualValuesHandler}\r\n                         isDisabled={error}\r\n        />\r\n\r\n        {error && <div style={styleInputBlock}>Please enter correct values!</div>}\r\n\r\n    </div>)\r\n\r\n}","import React, {Dispatch, SetStateAction, useState} from 'react';\r\nimport s from './CounterTablo.module.css'\r\nimport {InputBlockInitializeted} from \"../InputBlockInitializeted\";\r\n\r\ntype CounterTabloProps = {\r\n    count: number,\r\n    isIncButtonDisable: boolean,\r\n    isResetButtonDisable: boolean\r\n    isWarringMessage: boolean\r\n    minValue: number\r\n    maxValue: number\r\n    setStartValues: (currentMinValue: number, currentMaxValue: number) => void\r\n\r\n}\r\n\r\nexport const CounterTablo: React.FC<CounterTabloProps> = ({count, minValue, maxValue, isIncButtonDisable, isResetButtonDisable, isWarringMessage, setStartValues, ...props}) => {\r\n    const errorMessage = 'Counter have a max value. Please reset counter!'\r\n    const errorClass = isWarringMessage ? s.errorClass : ''\r\n    const CounterTableClasses = `${s.infoTablo} ${errorClass}`\r\n\r\n\r\n    return (\r\n            <div className={CounterTableClasses}>\r\n                <div>\r\n                    {count}\r\n                </div>\r\n                <div className={s.inputBlock}>\r\n                       {maxValue === 0 ? <InputBlockInitializeted title={'Set start values'} callback={setStartValues} minValue={minValue} maxValue={maxValue}/>\r\n                           : <div className={s.countInfo}>min: {minValue} max: {maxValue}</div>\r\n                       }\r\n                </div>\r\n                <div className={s.errorMessage}>\r\n                    {count !==0 && isWarringMessage && errorMessage}\r\n                </div>\r\n            </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport s from \"./AutoCounter.module.css\"\r\nimport {UniversalButton} from \"./Components/UniversalButton\";\r\n\r\ntype  AutoCounterProps = {\r\n    callback: () => void\r\n    isDisabled: boolean\r\n    isAuto: boolean\r\n}\r\n\r\nexport const AutoCounter = (props: AutoCounterProps) => {\r\n    let title = props.isAuto ? \"Pause\" : \"Auto Inc\"\r\n    return (\r\n        <div className={\"s.AutoCounter\"}>\r\n            <UniversalButton\r\n                title={title}\r\n                Color={'primary'}\r\n                isDisabled={props.isDisabled}\r\n                callback={props.callback}  />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './ControlPanel.module.css'\r\n\r\nimport {UniversalButton} from \"../UniversalButton\";\r\nimport {AutoCounter} from \"../../AutoCounter\";\r\n\r\n\r\nexport type ControlPanelPropsType = {\r\n    IncrementCountHandler: () => void\r\n    autoIncrementCountHandler: () => void\r\n    ResetCountHandler: () => void\r\n    isIncButtonDisable: boolean\r\n    isResetButtonDisable: boolean\r\n    isAutoIncButtonDisable: boolean\r\n    isAuto: boolean\r\n}\r\n\r\nexport const ControlPanel: React.FC<ControlPanelPropsType> = ({\r\n                                                                  IncrementCountHandler,\r\n                                                                  autoIncrementCountHandler,\r\n                                                                  ResetCountHandler,\r\n                                                                  isIncButtonDisable,\r\n                                                                  isResetButtonDisable,\r\n                                                                  isAutoIncButtonDisable,\r\n                                                                  ...props\r\n                                                              }) => {\r\n\r\n    return <div className={s.controlPanel}>\r\n        <UniversalButton title={\"INC\"}\r\n                         Color={\"primary\"}\r\n                         isDisabled={isIncButtonDisable}\r\n                         callback={IncrementCountHandler}/>\r\n\r\n        <UniversalButton title={\"RES\"}\r\n                         Color={\"secondary\"}\r\n                         isDisabled={isResetButtonDisable}\r\n                         callback={ResetCountHandler}/>\r\n\r\n        <AutoCounter callback={autoIncrementCountHandler}\r\n                     isDisabled={isAutoIncButtonDisable}\r\n                     isAuto={props.isAuto}/>\r\n\r\n    </div>\r\n}","import React, {Dispatch, MouseEventHandler, SetStateAction, useEffect, useState} from 'react';\r\nimport s from './Counter.module.css'\r\nimport {CounterTablo} from \"./CounterTablo/CounterTablo\";\r\nimport {ControlPanel} from \"./ControlPanel/ControlPanel\";\r\n\r\nexport const Counter = () => {\r\n    const IncrementCountHandler = () => {\r\n        let actualValue = count + 1;\r\n        setCount(actualValue);\r\n    }\r\n\r\n    const getCurrentCount = () => {\r\n        let restoreCurrentCount = localStorage.getItem('currentCount')\r\n        if (restoreCurrentCount) {\r\n            let currentCount = JSON.parse(restoreCurrentCount)\r\n            return currentCount\r\n        } else return 0\r\n    }\r\n    const getMinValue = () => {\r\n        let restoreMinValue = localStorage.getItem('minValue')\r\n        if (restoreMinValue) {\r\n            let min = JSON.parse(restoreMinValue)\r\n            return min\r\n        } else return 0\r\n    }\r\n    const getMaxValue = () => {\r\n        let restoreMaxValue = localStorage.getItem('maxValue')\r\n        if (restoreMaxValue) {\r\n            let max = JSON.parse(restoreMaxValue)\r\n            return max\r\n        } else return 0\r\n\r\n    }\r\n\r\n\r\n    let [minValue, setMinValue] = useState(getMinValue)\r\n    let [maxValue, setMaxValue] = useState(getMaxValue)\r\n\r\n    const setStartValues = () => {\r\n        setMinValue(getMinValue());\r\n        setMaxValue(getMaxValue());\r\n        setCount(getMinValue())\r\n    }\r\n\r\n    let [count, setCount] = useState<number>(getCurrentCount)\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('currentCount', JSON.stringify(count))\r\n    }, [count])\r\n\r\n    let [timerId, setTimerId] = useState<any>(null)\r\n\r\n    let [isAuto, setIsAuto] = useState(false)\r\n\r\n    useEffect(() => {\r\n        isAuto && setTimerId(setTimeout(() => {\r\n                if (count < maxValue ) {\r\n                    setCount(count + 1);\r\n                }\r\n            }, 1000))\r\n\r\n    },[count, isAuto]);\r\n\r\n    const autoIncrementCountHandler = () => {\r\n        timerId && clearTimeout(timerId)\r\n        setIsAuto(!isAuto)\r\n    }\r\n\r\n    let isIncButtonDisable = (count === maxValue) || isAuto\r\n    let isAutoIncButtonDisable = count === maxValue\r\n    let isResetButtonDisable = count === minValue\r\n    let isWarringMessage = count === maxValue\r\n\r\n    const ResetCountHandler = () => {\r\n        timerId && clearTimeout(timerId)\r\n        setMinValue(0)\r\n        setMaxValue(0)\r\n        setCount(0);\r\n        setIsAuto(false)\r\n        localStorage.clear()\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.counter}></div>\r\n\r\n            <CounterTablo count={count}\r\n                          minValue={minValue}\r\n                          maxValue={maxValue}\r\n                          isResetButtonDisable={isResetButtonDisable}\r\n                          isIncButtonDisable={isIncButtonDisable}\r\n                          isWarringMessage={isWarringMessage}\r\n                          setStartValues={setStartValues}\r\n                          />\r\n\r\n            <ControlPanel IncrementCountHandler={IncrementCountHandler}\r\n                          autoIncrementCountHandler={autoIncrementCountHandler}\r\n                          ResetCountHandler={ResetCountHandler}\r\n                          isIncButtonDisable={isIncButtonDisable}\r\n                          isResetButtonDisable={isResetButtonDisable}\r\n                          isAutoIncButtonDisable={isAutoIncButtonDisable}\r\n                          isAuto={isAuto}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Counter} from \"./Components/Counter\";\nimport {AutoCounter} from \"./AutoCounter\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Counter />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoTablo\":\"CounterTablo_infoTablo__1s8oG\",\"errorClass\":\"CounterTablo_errorClass__1vinB\",\"errorMessage\":\"CounterTablo_errorMessage__3DEXH\",\"countInfo\":\"CounterTablo_countInfo__1WDi0\"};"],"sourceRoot":""}