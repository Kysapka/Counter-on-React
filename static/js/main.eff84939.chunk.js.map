{"version":3,"sources":["Components/Counter.module.css","Components/ControlPanel/ControlPanel.module.css","reportWebVitals.ts","Store/counterReducer.ts","Components/UniversalButton.tsx","Components/InputBlockInitializeted.tsx","Components/CounterTablo/CounterTablo.tsx","AutoCounter.tsx","Components/ControlPanel/ControlPanel.tsx","Components/Counter.tsx","Store/store.ts","index.tsx","Components/CounterTablo/CounterTablo.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SET_VALUE","INC_VALUE","MIN_VALUE","MAX_VALUE","SET_TIMER_ID","TOGGLE_IS_AUTO","RESET_IS_AUTO","SET_ERROR","SET_CUR_VAL_OF_MIN","SET_CUR_VAL_OF_MAX","getMinValue","restoreMinValue","localStorage","getItem","Number","JSON","parse","getMaxValue","restoreMaxValue","initState","count","restoreCurrentCount","getCurrentCount","minValue","maxValue","currentValueOfMinCounter","currentValueOfMaxCounter","timerId","isAuto","error","setCounterValueAC","type","incCounterValueAC","setMinValueAC","setMaxValueAC","setErrorAC","UniversalButton","title","Color","callback","isDisabled","style","margin","Button","size","color","variant","onClick","disabled","styleInputBlock","fontSize","marginLeft","marginTop","marginBottom","InputBlockInitializeted","props","dispatch","useDispatch","useSelector","state","useEffect","placeholder","width","marginRight","onChange","event","setCurrentValueOfMinCounterAC","currentTarget","value","setCurrentValueOfMaxCounterAC","setItem","stringify","CounterTablo","isWarringMessage","isIncButtonDisable","isResetButtonDisable","setStartValues","errorClass","s","CounterTableClasses","infoTablo","className","inputBlock","countInfo","errorMessage","AutoCounter","ControlPanel","IncrementCountHandler","autoIncrementCountHandler","ResetCountHandler","isAutoIncButtonDisable","controlPanel","Counter","setTimerIdAC","setTimeout","wrapper","counter","clearTimeout","clear","rootReducer","combineReducers","action","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eff84939.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__1tGyV\",\"counter\":\"Counter_counter__1nKXm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"ControlPanel_controlPanel__c6lXd\",\"button\":\"ControlPanel_button__1XBCm\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SetStateAction} from \"react\"\r\n\r\nexport const SET_VALUE = 'SET_VALUE'\r\nexport const INC_VALUE = 'INC_VALUE'\r\nexport const MIN_VALUE = 'MIN_VALUE'\r\nexport const MAX_VALUE = 'MAX_VALUE'\r\nexport const SET_TIMER_ID = 'SET_TIMER_ID'\r\nexport const TOGGLE_IS_AUTO = 'TOGGLE_IS_AUTO'\r\nexport const RESET_IS_AUTO = 'RESET_IS_AUTO'\r\nexport const SET_ERROR = 'SET_ERROR'\r\nexport const SET_CUR_VAL_OF_MIN = 'SET_CUR_VAL_OF_MIN'\r\nexport const SET_CUR_VAL_OF_MAX = 'SET_CUR_VAL_OF_MAX'\r\n\r\n\r\nexport type ActionTypes =\r\n    SetCounterValueACType\r\n    | IncCounterValueACType\r\n    | setMinValueACType\r\n    | setMaxValueACType\r\n    | setTimerIdACType\r\n    | setIsAutoACType\r\n    | resetIsAutoACType\r\n    | setErrorACType\r\n    | setCurrentValueOfMinCounterACType\r\n    | setCurrentValueOfMaxCounterACType\r\n\r\ntype SetCounterValueACType = ReturnType<typeof setCounterValueAC>\r\ntype IncCounterValueACType = ReturnType<typeof incCounterValueAC>\r\ntype setMinValueACType = ReturnType<typeof setMinValueAC>\r\ntype setMaxValueACType = ReturnType<typeof setMaxValueAC>\r\ntype setTimerIdACType = ReturnType<typeof setTimerIdAC>\r\ntype setIsAutoACType = ReturnType<typeof toggleIsAutoAC>\r\ntype resetIsAutoACType = ReturnType<typeof resetIsAutoAC>\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\ntype setCurrentValueOfMinCounterACType = ReturnType<typeof setCurrentValueOfMinCounterAC>\r\ntype setCurrentValueOfMaxCounterACType = ReturnType<typeof setCurrentValueOfMaxCounterAC>\r\n\r\nexport const getCurrentCount = (): number => {\r\n    let restoreCurrentCount = localStorage.getItem('currentCount')\r\n    if (restoreCurrentCount) {\r\n        let currentCount = JSON.parse(restoreCurrentCount)\r\n        return currentCount\r\n    } else return 0\r\n}\r\n\r\nexport const getMinValue = (): number => {\r\n    let restoreMinValue = localStorage.getItem('minValue')\r\n    if (restoreMinValue) {\r\n        let min = Number(JSON.parse(restoreMinValue))\r\n        return min\r\n    } else return 0\r\n}\r\nexport const getMaxValue = (): number => {\r\n    let restoreMaxValue = localStorage.getItem('maxValue')\r\n    if (restoreMaxValue) {\r\n        let max = Number(JSON.parse(restoreMaxValue))\r\n        return max\r\n    } else return 0\r\n\r\n}\r\n\r\nexport type StateType = typeof initState\r\nlet initState = {\r\n    count: getCurrentCount(),\r\n    minValue: getMinValue(),\r\n    maxValue: getMaxValue(),\r\n    currentValueOfMinCounter: 0,\r\n    currentValueOfMaxCounter: 0,\r\n    timerId: 0,\r\n    isAuto: false,\r\n    error: false\r\n}\r\n\r\nexport const counterReducer = (state: StateType = initState, action: ActionTypes): StateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_VALUE:\r\n            return {...state, count: action.count}\r\n        case INC_VALUE:\r\n            return {...state, count: state.count + 1}\r\n        case MIN_VALUE:\r\n            return {...state, minValue: action.minValue}\r\n        case MAX_VALUE:\r\n            return {...state, maxValue: action.maxValue}\r\n        case SET_TIMER_ID:\r\n            return {...state, timerId: action.timerId}\r\n        case TOGGLE_IS_AUTO:\r\n            return {...state, isAuto: !state.isAuto}\r\n        case RESET_IS_AUTO:\r\n            return {...state, isAuto: false}\r\n        case SET_ERROR:\r\n            return {...state, error: action.error}\r\n        case SET_CUR_VAL_OF_MIN:\r\n            return {...state, currentValueOfMinCounter: action.currentValueOfMinCounter}\r\n        case SET_CUR_VAL_OF_MAX:\r\n            return {...state, currentValueOfMaxCounter: action.currentValueOfMaxCounter}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const setCounterValueAC = (count: number) => ({type: SET_VALUE, count} as const)\r\nexport const incCounterValueAC = () => ({type: INC_VALUE} as const)\r\nexport const setMinValueAC = (minValue: number) => ({type: MIN_VALUE, minValue} as const)\r\nexport const setMaxValueAC = (maxValue: number) => ({type: MAX_VALUE, maxValue} as const)\r\nexport const setTimerIdAC = (timerId: SetStateAction<any>) => ({type: SET_TIMER_ID, timerId} as const)\r\nexport const toggleIsAutoAC = () => ({type: TOGGLE_IS_AUTO} as const)\r\nexport const resetIsAutoAC = () => ({type: RESET_IS_AUTO} as const)\r\nexport const setErrorAC = (error: boolean) => ({type: SET_ERROR, error} as const)\r\nexport const setCurrentValueOfMinCounterAC = (currentValueOfMinCounter: number) => ({type: SET_CUR_VAL_OF_MIN, currentValueOfMinCounter} as const)\r\nexport const setCurrentValueOfMaxCounterAC = (currentValueOfMaxCounter: number) => ({type: SET_CUR_VAL_OF_MAX, currentValueOfMaxCounter} as const)","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype UniversalButtonPropsType = {\r\n    title: string\r\n    Color: \"primary\" | \"secondary\"\r\n    callback: () => void\r\n    isDisabled: boolean\r\n}\r\n\r\nexport const UniversalButton:React.FC<UniversalButtonPropsType> = ({title,Color,callback, isDisabled, ...props}) => {\r\n    return (<div style={{margin: 5}}>\r\n        <Button\r\n                size={\"small\"}\r\n                color={Color}\r\n                variant={\"contained\"}\r\n                onClick={callback}\r\n                disabled={isDisabled}>\r\n            {title}\r\n        </Button>\r\n    </div>)\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport {setCurrentValueOfMaxCounterAC, setCurrentValueOfMinCounterAC, setErrorAC, StateType } from '../Store/counterReducer';\r\nimport { RootStateType } from '../Store/store';\r\nimport {UniversalButton} from \"./UniversalButton\";\r\n\r\ntype InputBlockInitializetedProps = {\r\n    minValue: number\r\n    maxValue: number\r\n    title: string\r\n    callback: (currentMinValue: number, currentMaxValue: number) => void,\r\n}\r\n\r\nconst styleInputBlock = {\r\n    fontSize: \"medium\",\r\n    marginLeft: 10,\r\n    marginTop: 10,\r\n    marginBottom: 10\r\n}\r\n\r\nconst input = {\r\n    marginRight: 10,\r\n    marginBottom: 5\r\n}\r\nexport const InputBlockInitializeted: React.FC<InputBlockInitializetedProps> = (props: InputBlockInitializetedProps) => {\r\n\r\n    let dispatch = useDispatch()\r\n    let {error, currentValueOfMinCounter, currentValueOfMaxCounter} = useSelector<RootStateType, StateType>(state => state.state)\r\n\r\n    const setInputMinCurrentValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setCurrentValueOfMinCounterAC(Number(event.currentTarget.value)))\r\n    }\r\n    const setInputMaxCurrentValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setCurrentValueOfMaxCounterAC(Number(event.currentTarget.value)))\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (currentValueOfMinCounter < 0 || currentValueOfMaxCounter < 0 || currentValueOfMinCounter === currentValueOfMaxCounter || currentValueOfMinCounter > currentValueOfMaxCounter) {\r\n            dispatch(setErrorAC(true))\r\n        } else {\r\n            dispatch(setErrorAC(false))\r\n\r\n        }\r\n\r\n    }, [currentValueOfMinCounter, currentValueOfMaxCounter])\r\n\r\n    const setActualValuesHandler = () => {\r\n        localStorage.setItem('minValue', JSON.stringify(currentValueOfMinCounter))\r\n        localStorage.setItem('maxValue', JSON.stringify(currentValueOfMaxCounter))\r\n        props.callback(currentValueOfMinCounter, currentValueOfMaxCounter)\r\n    }\r\n\r\n    return (<div style={styleInputBlock}>\r\n        <div>\r\n            <input\r\n                type={'number'}\r\n                placeholder={'enter min value...'}\r\n                style={{width: 120, marginBottom: 5, marginRight: 5}}\r\n                onChange={setInputMinCurrentValueHandler}\r\n            />\r\n\r\n            <input\r\n                type=\"number\"\r\n                placeholder={'enter max value...'}\r\n                style={{width: 120, marginBottom: 5}}\r\n                onChange={setInputMaxCurrentValueHandler}\r\n            />\r\n        </div>\r\n        <UniversalButton title={props.title}\r\n                         Color={\"primary\"}\r\n                         callback={setActualValuesHandler}\r\n                         isDisabled={error}\r\n        />\r\n        {error && <div style={styleInputBlock}>Please enter correct values!</div>}\r\n    </div>)\r\n}","import React, {Dispatch, SetStateAction, useState} from 'react';\r\nimport s from './CounterTablo.module.css'\r\nimport {InputBlockInitializeted} from \"../InputBlockInitializeted\";\r\n\r\ntype CounterTabloProps = {\r\n    count: number,\r\n    isIncButtonDisable: boolean,\r\n    isResetButtonDisable: boolean\r\n    isWarringMessage: boolean\r\n    minValue: number\r\n    maxValue: number\r\n    setStartValues: (currentMinValue: number, currentMaxValue: number) => void\r\n\r\n}\r\n\r\nexport const CounterTablo: React.FC<CounterTabloProps> = ({count,\r\n                                                              minValue,\r\n                                                              maxValue,\r\n                                                              isIncButtonDisable,\r\n                                                              isResetButtonDisable,\r\n                                                              isWarringMessage,\r\n                                                              setStartValues, ...props}) => {\r\n\r\n    const errorMessage = 'Counter have a max value. Please reset counter!'\r\n    const errorClass = isWarringMessage ? s.errorClass : ''\r\n    const CounterTableClasses = `${s.infoTablo} ${errorClass}`\r\n\r\n    return (\r\n            <div className={CounterTableClasses}>\r\n                <div>\r\n                    {count}\r\n                </div>\r\n                <div className={s.inputBlock}>\r\n                       {maxValue === 0 ? <InputBlockInitializeted title={'Set start values'} callback={setStartValues} minValue={minValue} maxValue={maxValue}/>\r\n                           : <div className={s.countInfo}>min: {minValue} max: {maxValue}</div>\r\n                       }\r\n                </div>\r\n                <div className={s.errorMessage}>\r\n                    {count !==0 && isWarringMessage && errorMessage}\r\n                </div>\r\n            </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport s from \"./AutoCounter.module.css\"\r\nimport {UniversalButton} from \"./Components/UniversalButton\";\r\n\r\ntype  AutoCounterProps = {\r\n    callback: () => void\r\n    isDisabled: boolean\r\n    isAuto: boolean\r\n}\r\n\r\nexport const AutoCounter = (props: AutoCounterProps) => {\r\n    let title = props.isAuto ? \"Pause\" : \"Auto Inc\"\r\n    return (\r\n        <div className={\"s.AutoCounter\"}>\r\n            <UniversalButton\r\n                title={title}\r\n                Color={'primary'}\r\n                isDisabled={props.isDisabled}\r\n                callback={props.callback}  />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from './ControlPanel.module.css'\r\nimport {UniversalButton} from \"../UniversalButton\";\r\nimport {AutoCounter} from \"../../AutoCounter\";\r\n\r\nexport type ControlPanelPropsType = {\r\n    IncrementCountHandler: () => void\r\n    autoIncrementCountHandler: () => void\r\n    ResetCountHandler: () => void\r\n    isIncButtonDisable: boolean\r\n    isResetButtonDisable: boolean\r\n    isAutoIncButtonDisable: boolean\r\n    isAuto: boolean\r\n}\r\n\r\nexport const ControlPanel: React.FC<ControlPanelPropsType> = ({\r\n                                                                  IncrementCountHandler,\r\n                                                                  autoIncrementCountHandler,\r\n                                                                  ResetCountHandler,\r\n                                                                  isIncButtonDisable,\r\n                                                                  isResetButtonDisable,\r\n                                                                  isAutoIncButtonDisable,\r\n                                                                  ...props\r\n                                                              }) => {\r\n\r\n    return <div className={s.controlPanel}>\r\n        <UniversalButton title={\"INC\"}\r\n                         Color={\"primary\"}\r\n                         isDisabled={isIncButtonDisable}\r\n                         callback={IncrementCountHandler}/>\r\n\r\n        <UniversalButton title={\"RES\"}\r\n                         Color={\"secondary\"}\r\n                         isDisabled={isResetButtonDisable}\r\n                         callback={ResetCountHandler}/>\r\n\r\n        <AutoCounter callback={autoIncrementCountHandler}\r\n                     isDisabled={isAutoIncButtonDisable}\r\n                     isAuto={props.isAuto}/>\r\n\r\n    </div>\r\n}","import React, {MouseEventHandler, SetStateAction, useEffect, useReducer, useState} from 'react';\r\nimport s from './Counter.module.css'\r\nimport {CounterTablo} from \"./CounterTablo/CounterTablo\";\r\nimport {ControlPanel} from \"./ControlPanel/ControlPanel\";\r\nimport { counterReducer,\r\n    incCounterValueAC,\r\n    setCounterValueAC,\r\n    setMinValueAC,\r\n    setMaxValueAC,\r\n    getMinValue, getMaxValue,\r\n    StateType, setTimerIdAC,\r\n    toggleIsAutoAC,\r\n    resetIsAutoAC,\r\n     } from '../Store/counterReducer';\r\nimport { RootStateType } from '../Store/store';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\nexport const Counter = () => {\r\n\r\n    let dispatch = useDispatch()\r\n    let {count, minValue, maxValue, timerId, isAuto} = useSelector<RootStateType, StateType>((state) => state.state)\r\n\r\n    const setStartValues = () => {\r\n        dispatch(setMinValueAC(getMinValue()))\r\n        dispatch(setMaxValueAC(getMaxValue()))\r\n        dispatch(setCounterValueAC(getMinValue()))\r\n    }\r\n    const IncrementCountHandler = () => {\r\n        dispatch(incCounterValueAC());\r\n    }\r\n\r\n    // Сетаем текущее значение в localStorage при изменении счетчика\r\n    useEffect(() => {\r\n        localStorage.setItem('currentCount', JSON.stringify(count))\r\n    }, [count])\r\n\r\n    // Запуск автоматического счетчика\r\n    useEffect(() => {\r\n        isAuto && dispatch(setTimerIdAC(setTimeout(() => {\r\n            if (count < maxValue ) {\r\n                dispatch(incCounterValueAC());\r\n            }\r\n        }, 1000)))\r\n\r\n    },[count, isAuto]);\r\n\r\n    // Остановка автоматического счетчика, очистка timerId\r\n    const autoIncrementCountHandler = () => {\r\n        timerId && clearTimeout(timerId)\r\n        dispatch(toggleIsAutoAC())\r\n    }\r\n\r\n    // Логика отключения кнопок (enabled/disabled\r\n    let isIncButtonDisable = (count === maxValue) || isAuto\r\n    let isAutoIncButtonDisable = count === maxValue\r\n    let isResetButtonDisable = count === minValue\r\n    let isWarringMessage = count === maxValue\r\n\r\n    // Функция обнуляющая все значения. Reset состояния.\r\n    const ResetCountHandler = () => {\r\n        timerId && clearTimeout(timerId)\r\n        dispatch(setMinValueAC(0))\r\n        dispatch(setMaxValueAC(0))\r\n        dispatch(setCounterValueAC(0));\r\n        dispatch(resetIsAutoAC())\r\n        localStorage.clear()\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.counter}></div>\r\n\r\n            <CounterTablo count={count}\r\n                          minValue={minValue}\r\n                          maxValue={maxValue}\r\n                          isResetButtonDisable={isResetButtonDisable}\r\n                          isIncButtonDisable={isIncButtonDisable}\r\n                          isWarringMessage={isWarringMessage}\r\n                          setStartValues={setStartValues}\r\n                          />\r\n\r\n            <ControlPanel IncrementCountHandler={IncrementCountHandler}\r\n                          autoIncrementCountHandler={autoIncrementCountHandler}\r\n                          ResetCountHandler={ResetCountHandler}\r\n                          isIncButtonDisable={isIncButtonDisable}\r\n                          isResetButtonDisable={isResetButtonDisable}\r\n                          isAutoIncButtonDisable={isAutoIncButtonDisable}\r\n                          isAuto={isAuto}/>\r\n        </div>\r\n    )\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport { counterReducer } from './counterReducer';\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    state: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Counter} from \"./Components/Counter\";\nimport {Provider} from 'react-redux'\nimport { store } from './Store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <Counter />\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoTablo\":\"CounterTablo_infoTablo__1s8oG\",\"errorClass\":\"CounterTablo_errorClass__1vinB\",\"errorMessage\":\"CounterTablo_errorMessage__3DEXH\",\"countInfo\":\"CounterTablo_countInfo__1WDi0\"};"],"sourceRoot":""}