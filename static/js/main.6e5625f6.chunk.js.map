{"version":3,"sources":["Components/Counter.module.css","Components/ControlPanel/ControlPanel.module.css","reportWebVitals.ts","Store/counterReducer.ts","Components/UniversalButton.tsx","Components/InputBlockInitializeted.tsx","Components/CounterTablo/CounterTablo.tsx","AutoCounter.tsx","Components/ControlPanel/ControlPanel.tsx","Components/Counter.tsx","Store/store.ts","utils/LcalStorageUtils.ts","index.tsx","Components/CounterTablo/CounterTablo.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SET_VALUE","INC_VALUE","MIN_VALUE","MAX_VALUE","SET_TIMER_ID","TOGGLE_IS_AUTO","RESET_IS_AUTO","SET_ERROR","SET_CUR_VAL_OF_MIN","SET_CUR_VAL_OF_MAX","initState","count","minValue","maxValue","currentValueOfMinCounter","currentValueOfMaxCounter","timerId","isAuto","error","setCounterValueAC","type","incCounterValueAC","setMinValueAC","setMaxValueAC","setErrorAC","setCurrentValueOfMinCounterAC","setCurrentValueOfMaxCounterAC","resetLocalStorageTC","dispatch","clearTimeout","localStorage","clear","toggteAutoModeCounterTC","getState","state","setTimeout","UniversalButton","title","Color","callback","isDisabled","style","margin","Button","size","color","variant","onClick","disabled","styleInputBlock","fontSize","marginLeft","marginTop","marginBottom","InputBlockInitializeted","props","useDispatch","useSelector","useEffect","placeholder","width","marginRight","onChange","event","Number","currentTarget","value","CounterTablo","isWarringMessage","isIncButtonDisable","isResetButtonDisable","setStartValues","errorClass","s","CounterTableClasses","infoTablo","className","inputBlock","countInfo","errorMessage","AutoCounter","ControlPanel","IncrementCountHandler","autoIncrementCountHandler","ResetCountHandler","isAutoIncButtonDisable","controlPanel","Counter","wrapper","counter","rootReducer","combineReducers","action","store","createStore","serializedState","getItem","loadedState","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","setItem","stringify","saveState","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e5625f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Counter_wrapper__1tGyV\",\"counter\":\"Counter_counter__1nKXm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"ControlPanel_controlPanel__c6lXd\",\"button\":\"ControlPanel_button__1XBCm\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {SetStateAction} from \"react\"\r\nimport {Dispatch} from \"redux\"\r\nimport {RootStateType} from \"./store\"\r\n\r\nexport const SET_VALUE = 'SET_VALUE'\r\nexport const INC_VALUE = 'INC_VALUE'\r\nexport const MIN_VALUE = 'MIN_VALUE'\r\nexport const MAX_VALUE = 'MAX_VALUE'\r\nexport const SET_TIMER_ID = 'SET_TIMER_ID'\r\nexport const TOGGLE_IS_AUTO = 'TOGGLE_IS_AUTO'\r\nexport const RESET_IS_AUTO = 'RESET_IS_AUTO'\r\nexport const SET_ERROR = 'SET_ERROR'\r\nexport const SET_CUR_VAL_OF_MIN = 'SET_CUR_VAL_OF_MIN'\r\nexport const SET_CUR_VAL_OF_MAX = 'SET_CUR_VAL_OF_MAX'\r\n\r\n\r\nexport type ActionsTypes =\r\n    SetCounterValueACType\r\n    | IncCounterValueACType\r\n    | setMinValueACType\r\n    | setMaxValueACType\r\n    | setTimerIdACType\r\n    | setIsAutoACType\r\n    | resetIsAutoACType\r\n    | setErrorACType\r\n    | setCurrentValueOfMinCounterACType\r\n    | setCurrentValueOfMaxCounterACType\r\n\r\ntype SetCounterValueACType = ReturnType<typeof setCounterValueAC>\r\ntype IncCounterValueACType = ReturnType<typeof incCounterValueAC>\r\ntype setMinValueACType = ReturnType<typeof setMinValueAC>\r\ntype setMaxValueACType = ReturnType<typeof setMaxValueAC>\r\ntype setTimerIdACType = ReturnType<typeof setTimerIdAC>\r\ntype setIsAutoACType = ReturnType<typeof toggleIsAutoAC>\r\ntype resetIsAutoACType = ReturnType<typeof resetIsAutoAC>\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\ntype setCurrentValueOfMinCounterACType = ReturnType<typeof setCurrentValueOfMinCounterAC>\r\ntype setCurrentValueOfMaxCounterACType = ReturnType<typeof setCurrentValueOfMaxCounterAC>\r\n\r\nexport type StateType = typeof initState\r\n\r\nlet initState = {\r\n    count: 0,\r\n    minValue: 0,\r\n    maxValue: 0,\r\n    currentValueOfMinCounter: 0,\r\n    currentValueOfMaxCounter: 0,\r\n    timerId: 0,\r\n    isAuto: false,\r\n    error: false\r\n}\r\n\r\n// Альтернативный редьюсер через ассоциативный массив:\r\n//\r\n// export const counterReducer = (state: StateType = initState, action: any): StateType => {\r\n//     const handlers = {\r\n//         [SET_VALUE]: () => ({...state, count: action.count}),\r\n//         [INC_VALUE]: () => ({...state, count: state.count + 1}),\r\n//         [MIN_VALUE]: () => ({...state, minValue: action.minValue}),\r\n//         [MAX_VALUE]: () => ({...state, maxValue: action.maxValue}),\r\n//         [SET_TIMER_ID]: () => ({...state, timerId: action.timerId}),\r\n//         [TOGGLE_IS_AUTO]: () => ({...state, isAuto: !state.isAuto}),\r\n//         [RESET_IS_AUTO]: () => ({...state, isAuto: false}),\r\n//         [SET_ERROR]: () => ({...state, error: action.error}),\r\n//         [SET_CUR_VAL_OF_MIN]: () => ({...state, currentValueOfMinCounter: action.currentValueOfMinCounter}),\r\n//         [SET_CUR_VAL_OF_MAX]: () => ({...state, currentValueOfMaxCounter: action.currentValueOfMaxCounter\r\n//         })\r\n//     }\r\n//         // @ts-ignore\r\n//     return handlers[action.type] && handlers[action.type]() || state\r\n// }\r\n\r\nexport const counterReducer = (state: StateType = initState, action: ActionsTypes): StateType => {\r\n    switch (action.type) {\r\n\r\n        case SET_VALUE:\r\n            return {...state, count: action.count}\r\n        case INC_VALUE:\r\n            return {...state, count: state.count + 1}\r\n        case MIN_VALUE:\r\n            return {...state, minValue: action.minValue}\r\n        case MAX_VALUE:\r\n            return {...state, maxValue: action.maxValue}\r\n        case SET_TIMER_ID:\r\n            return {...state, timerId: action.timerId}\r\n        case TOGGLE_IS_AUTO:\r\n            return {...state, isAuto: !state.isAuto}\r\n        case RESET_IS_AUTO:\r\n            return {...state, isAuto: false}\r\n        case SET_ERROR:\r\n            return {...state, error: action.error}\r\n        case SET_CUR_VAL_OF_MIN:\r\n            return {...state, currentValueOfMinCounter: action.currentValueOfMinCounter}\r\n        case SET_CUR_VAL_OF_MAX:\r\n            return {...state, currentValueOfMaxCounter: action.currentValueOfMaxCounter}\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const setCounterValueAC = (count: number) => ({type: SET_VALUE, count} as const)\r\nexport const incCounterValueAC = () => ({type: INC_VALUE} as const)\r\nexport const setMinValueAC = (minValue: number) => ({type: MIN_VALUE, minValue} as const)\r\nexport const setMaxValueAC = (maxValue: number) => ({type: MAX_VALUE, maxValue} as const)\r\nexport const setTimerIdAC = (timerId: SetStateAction<any>) => ({type: SET_TIMER_ID, timerId} as const)\r\nexport const toggleIsAutoAC = () => ({type: TOGGLE_IS_AUTO} as const)\r\nexport const resetIsAutoAC = () => ({type: RESET_IS_AUTO} as const)\r\nexport const setErrorAC = (error: boolean) => ({type: SET_ERROR, error} as const)\r\nexport const setCurrentValueOfMinCounterAC = (currentValueOfMinCounter: number) => ({type: SET_CUR_VAL_OF_MIN, currentValueOfMinCounter} as const)\r\nexport const setCurrentValueOfMaxCounterAC = (currentValueOfMaxCounter: number) => ({type: SET_CUR_VAL_OF_MAX, currentValueOfMaxCounter} as const)\r\n\r\nexport const setStartValuesTC = () => (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    dispatch(setMinValueAC(getState().state.currentValueOfMinCounter))\r\n    dispatch(setMaxValueAC(getState().state.currentValueOfMaxCounter))\r\n    dispatch(setCounterValueAC(getState().state.currentValueOfMinCounter))\r\n}\r\nexport const resetLocalStorageTC = (timerId: SetStateAction<any>) => (dispatch: Dispatch) => {\r\n    timerId && clearTimeout(timerId)\r\n    dispatch(setMinValueAC(0))\r\n    dispatch(setMaxValueAC(0))\r\n    dispatch(setCounterValueAC(0));\r\n    dispatch(resetIsAutoAC())\r\n    localStorage.clear()\r\n}\r\n\r\nexport const toggteAutoModeCounterTC = () => (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    let {count, maxValue, isAuto} = getState().state\r\n    isAuto && dispatch(setTimerIdAC(setTimeout(() => {\r\n        if (count < maxValue ) {\r\n            dispatch(incCounterValueAC());\r\n        }\r\n    }, 1000)))\r\n}","import React from 'react';\r\nimport {Button} from \"@material-ui/core\";\r\n\r\ntype UniversalButtonPropsType = {\r\n    title: string\r\n    Color: \"primary\" | \"secondary\"\r\n    callback: () => void\r\n    isDisabled: boolean\r\n}\r\n\r\nexport const UniversalButton:React.FC<UniversalButtonPropsType> = ({title,Color,callback, isDisabled, ...props}) => {\r\n    return (<div style={{margin: 5}}>\r\n        <Button\r\n                size={\"small\"}\r\n                color={Color}\r\n                variant={\"contained\"}\r\n                onClick={callback}\r\n                disabled={isDisabled}>\r\n            {title}\r\n        </Button>\r\n    </div>)\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    setCurrentValueOfMaxCounterAC,\r\n    setCurrentValueOfMinCounterAC,\r\n    setErrorAC,\r\n    StateType\r\n} from '../Store/counterReducer';\r\nimport {RootStateType} from '../Store/store';\r\nimport {UniversalButton} from \"./UniversalButton\";\r\n\r\ntype InputBlockInitializetedProps = {\r\n    minValue: number\r\n    maxValue: number\r\n    title: string\r\n    callback: (currentMinValue: number, currentMaxValue: number) => void,\r\n}\r\n\r\nconst styleInputBlock = {\r\n    fontSize: \"medium\",\r\n    marginLeft: 10,\r\n    marginTop: 10,\r\n    marginBottom: 10\r\n}\r\n\r\nconst input = {\r\n    marginRight: 10,\r\n    marginBottom: 5\r\n}\r\nexport const InputBlockInitializeted: React.FC<InputBlockInitializetedProps> = (props: InputBlockInitializetedProps) => {\r\n\r\n    let dispatch = useDispatch()\r\n    let {error, currentValueOfMinCounter, currentValueOfMaxCounter} = useSelector<RootStateType, StateType>(state => state.state)\r\n\r\n    const setInputMinCurrentValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setCurrentValueOfMinCounterAC(Number(event.currentTarget.value)))\r\n    }\r\n    const setInputMaxCurrentValueHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setCurrentValueOfMaxCounterAC(Number(event.currentTarget.value)))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (currentValueOfMinCounter < 0 || currentValueOfMaxCounter < 0 || currentValueOfMinCounter === currentValueOfMaxCounter || currentValueOfMinCounter > currentValueOfMaxCounter) {\r\n            dispatch(setErrorAC(true))\r\n        } else {\r\n            dispatch(setErrorAC(false))\r\n        }\r\n    }, [currentValueOfMinCounter, currentValueOfMaxCounter])\r\n\r\n    const setActualValuesHandler = () => {\r\n        props.callback(currentValueOfMinCounter, currentValueOfMaxCounter)\r\n        dispatch(setCurrentValueOfMinCounterAC(0))\r\n        dispatch(setCurrentValueOfMaxCounterAC(0))\r\n    }\r\n\r\n    return (<div style={styleInputBlock}>\r\n        <div>\r\n            <input\r\n                type={'number'}\r\n                placeholder={'enter min value...'}\r\n                style={{width: 120, marginBottom: 5, marginRight: 5}}\r\n                onChange={setInputMinCurrentValueHandler}\r\n            />\r\n\r\n            <input\r\n                type=\"number\"\r\n                placeholder={'enter max value...'}\r\n                style={{width: 120, marginBottom: 5}}\r\n                onChange={setInputMaxCurrentValueHandler}\r\n            />\r\n        </div>\r\n        <UniversalButton title={props.title}\r\n                         Color={\"primary\"}\r\n                         callback={setActualValuesHandler}\r\n                         isDisabled={error}\r\n        />\r\n        {error && <div style={styleInputBlock}>Please enter correct values!</div>}\r\n    </div>)\r\n}","import React, {Dispatch, SetStateAction, useState} from 'react';\r\nimport s from './CounterTablo.module.css'\r\nimport {InputBlockInitializeted} from \"../InputBlockInitializeted\";\r\n\r\ntype CounterTabloProps = {\r\n    count: number,\r\n    isIncButtonDisable: boolean,\r\n    isResetButtonDisable: boolean\r\n    isWarringMessage: boolean\r\n    minValue: number\r\n    maxValue: number\r\n    setStartValues: (currentMinValue: number, currentMaxValue: number) => void\r\n\r\n}\r\n\r\nexport const CounterTablo: React.FC<CounterTabloProps> = ({count,\r\n                                                              minValue,\r\n                                                              maxValue,\r\n                                                              isIncButtonDisable,\r\n                                                              isResetButtonDisable,\r\n                                                              isWarringMessage,\r\n                                                              setStartValues, ...props}) => {\r\n\r\n    const errorMessage = 'Counter have a max value. Please reset counter!'\r\n    const errorClass = isWarringMessage ? s.errorClass : ''\r\n    const CounterTableClasses = `${s.infoTablo} ${errorClass}`\r\n\r\n    return (\r\n            <div className={CounterTableClasses}>\r\n                <div>\r\n                    {count}\r\n                </div>\r\n                <div className={s.inputBlock}>\r\n                       {maxValue === 0 ? <InputBlockInitializeted title={'Set start values'} callback={setStartValues} minValue={minValue} maxValue={maxValue}/>\r\n                           : <div className={s.countInfo}>min: {minValue} max: {maxValue}</div>\r\n                       }\r\n                </div>\r\n                <div className={s.errorMessage}>\r\n                    {count !==0 && isWarringMessage && errorMessage}\r\n                </div>\r\n            </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport s from \"./AutoCounter.module.css\"\r\nimport {UniversalButton} from \"./Components/UniversalButton\";\r\n\r\ntype  AutoCounterProps = {\r\n    callback: () => void\r\n    isDisabled: boolean\r\n    isAuto: boolean\r\n}\r\n\r\nexport const AutoCounter = (props: AutoCounterProps) => {\r\n    let title = props.isAuto ? \"Pause\" : \"Auto Inc\"\r\n    return (\r\n        <div className={\"s.AutoCounter\"}>\r\n            <UniversalButton\r\n                title={title}\r\n                Color={'primary'}\r\n                isDisabled={props.isDisabled}\r\n                callback={props.callback}  />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './ControlPanel.module.css'\r\nimport {UniversalButton} from \"../UniversalButton\";\r\nimport {AutoCounter} from \"../../AutoCounter\";\r\n\r\nexport type ControlPanelPropsType = {\r\n    IncrementCountHandler: () => void\r\n    autoIncrementCountHandler: () => void\r\n    ResetCountHandler: () => void\r\n    isIncButtonDisable: boolean\r\n    isResetButtonDisable: boolean\r\n    isAutoIncButtonDisable: boolean\r\n    isAuto: boolean\r\n}\r\n\r\nexport const ControlPanel: React.FC<ControlPanelPropsType> = ({\r\n                                                                  IncrementCountHandler,\r\n                                                                  autoIncrementCountHandler,\r\n                                                                  ResetCountHandler,\r\n                                                                  isIncButtonDisable,\r\n                                                                  isResetButtonDisable,\r\n                                                                  isAutoIncButtonDisable,\r\n                                                                  ...props\r\n                                                              }) => {\r\n\r\n    return <div className={s.controlPanel}>\r\n        <UniversalButton title={\"INC\"}\r\n                         Color={\"primary\"}\r\n                         isDisabled={isIncButtonDisable}\r\n                         callback={IncrementCountHandler}/>\r\n\r\n        <UniversalButton title={\"RES\"}\r\n                         Color={\"secondary\"}\r\n                         isDisabled={isResetButtonDisable}\r\n                         callback={ResetCountHandler}/>\r\n\r\n        <AutoCounter callback={autoIncrementCountHandler}\r\n                     isDisabled={isAutoIncButtonDisable}\r\n                     isAuto={props.isAuto}/>\r\n\r\n    </div>\r\n}","import React, {MouseEventHandler, SetStateAction, useEffect, useReducer, useState} from 'react';\r\nimport s from './Counter.module.css'\r\nimport {CounterTablo} from \"./CounterTablo/CounterTablo\";\r\nimport {ControlPanel} from \"./ControlPanel/ControlPanel\";\r\nimport { counterReducer,\r\n    incCounterValueAC,\r\n    setCounterValueAC,\r\n    setMinValueAC,\r\n    setMaxValueAC,\r\n    StateType, setTimerIdAC,\r\n    toggleIsAutoAC,\r\n    resetIsAutoAC,\r\n    // incValueTC,\r\n    resetLocalStorageTC,\r\n    setStartValuesTC,\r\n    toggteAutoModeCounterTC,\r\n     } from '../Store/counterReducer';\r\n\r\nimport { RootStateType } from '../Store/store';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\nexport const Counter = () => {\r\n\r\n    let dispatch = useDispatch()\r\n    let {count, minValue, maxValue, timerId, isAuto} = useSelector<RootStateType, StateType>((state) => state.state)\r\n\r\n    const setStartValues = () => {\r\n        dispatch(setStartValuesTC())\r\n    }\r\n    const IncrementCountHandler = () => {\r\n        dispatch(incCounterValueAC());\r\n    }\r\n\r\n    // // Запуск автоматического счетчика\r\n    useEffect(() => {\r\n        dispatch(toggteAutoModeCounterTC())\r\n    },[count, isAuto]);\r\n\r\n    // Остановка автоматического счетчика, clear timerId\r\n    const autoIncrementCountHandler = () => {\r\n        timerId && clearTimeout(timerId)\r\n        dispatch(toggleIsAutoAC())\r\n    }\r\n\r\n    // Логика отключения кнопок (enabled/disabled\r\n    let isIncButtonDisable = (count === maxValue) || isAuto\r\n    let isAutoIncButtonDisable = count === maxValue\r\n    let isResetButtonDisable = count === minValue\r\n    let isWarringMessage = count === maxValue\r\n\r\n    // Функция обнуляющая все значения. Reset состояния.\r\n    const ResetCountHandler = () => {\r\n    dispatch(resetLocalStorageTC(timerId))\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.counter}></div>\r\n\r\n            <CounterTablo count={count}\r\n                          minValue={minValue}\r\n                          maxValue={maxValue}\r\n                          isResetButtonDisable={isResetButtonDisable}\r\n                          isIncButtonDisable={isIncButtonDisable}\r\n                          isWarringMessage={isWarringMessage}\r\n                          setStartValues={setStartValues}\r\n                          />\r\n\r\n            <ControlPanel IncrementCountHandler={IncrementCountHandler}\r\n                          autoIncrementCountHandler={autoIncrementCountHandler}\r\n                          ResetCountHandler={ResetCountHandler}\r\n                          isIncButtonDisable={isIncButtonDisable}\r\n                          isResetButtonDisable={isResetButtonDisable}\r\n                          isAutoIncButtonDisable={isAutoIncButtonDisable}\r\n                          isAuto={isAuto}/>\r\n        </div>\r\n    )\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport { counterReducer } from './counterReducer';\r\nimport thunk from 'redux-thunk'\r\nimport {loadState, saveState } from '../utils/LcalStorageUtils';\r\n\r\n// export type rootStoreType = typeof store\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\nexport type rootReducerType = typeof rootReducer\r\n\r\nconst rootReducer = combineReducers({\r\n    state: counterReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, loadState() ,applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState())\r\n})\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n\r\n\r\n","import { RootStateType } from \"../Store/store\"\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        let serializedState = localStorage.getItem('app_state')\r\n        if (serializedState === null) {\r\n            return undefined\r\n        }\r\n        let loadedState =  JSON.parse(serializedState)\r\n        loadedState.state.isAuto = false\r\n        return loadedState\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n\r\n}\r\n\r\nexport const saveState = (state: RootStateType) => {\r\n    try {\r\n        localStorage.setItem('app_state', JSON.stringify(state))\r\n    }\r\n    catch (err) {\r\n        // ignore write error\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Counter} from \"./Components/Counter\";\nimport {Provider} from 'react-redux'\nimport { store } from './Store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <Counter />\n        </React.StrictMode>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"infoTablo\":\"CounterTablo_infoTablo__1s8oG\",\"errorClass\":\"CounterTablo_errorClass__1vinB\",\"errorMessage\":\"CounterTablo_errorMessage__3DEXH\",\"countInfo\":\"CounterTablo_countInfo__1WDi0\"};"],"sourceRoot":""}